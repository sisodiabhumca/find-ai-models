name: Update Static Demo with New Models

on:
  schedule:
    # Run daily at 6 PM PST (2 AM UTC next day) - after discovery runs
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-demo:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run model discovery
      run: npm run discover
      env:
        NODE_ENV: production
        
    - name: Update static demo with latest models
      run: |
        # Read the updated database
        node -e "
        import fs from 'fs';
        import path from 'path';
        
        const dbPath = './data/db.json';
        const demoPath = './public/static-demo.html';
        
        if (!fs.existsSync(dbPath)) {
          console.log('Database file not found, skipping update');
          process.exit(0);
        }
        
        const db = JSON.parse(fs.readFileSync(dbPath, 'utf8'));
        const models = db.models || [];
        
        // Take the most recent 12 models (mix of types)
        const recentModels = models
          .sort((a, b) => new Date(b.last_updated || 0) - new Date(a.last_updated || 0))
          .slice(0, 12);
        
        // Ensure we have a good mix of model types
        const llmModels = recentModels.filter(m => m.type === 'LLM').slice(0, 6);
        const visionModels = recentModels.filter(m => m.type === 'Vision').slice(0, 2);
        const speechModels = recentModels.filter(m => m.type === 'Speech').slice(0, 2);
        const otherModels = recentModels.filter(m => !['LLM', 'Vision', 'Speech'].includes(m.type)).slice(0, 2);
        
        const selectedModels = [...llmModels, ...visionModels, ...speechModels, ...otherModels];
        
        // Create the models array for the demo
        const modelsArray = selectedModels.map(model => ({
          id: model.id || model.name.toLowerCase().replace(/[^a-z0-9]/g, '-'),
          name: model.name,
          provider: model.provider,
          type: model.type,
          cost_per_1k_tokens: model.cost_per_1k_tokens,
          cost_tier: model.cost_tier,
          latency_tier: model.latency_tier,
          description: model.description,
          use_cases: model.use_cases,
          industry: model.industry || ['general'],
          benchmarks: model.benchmarks || { overall: 0.75 },
          pros: model.pros || [],
          cons: model.cons || [],
          url: model.url || '#'
        }));
        
        // Read the current demo file
        let demoContent = fs.readFileSync(demoPath, 'utf8');
        
        // Replace the models array
        const modelsRegex = /const models = \[[\s\S]*?\];/;
        const newModelsArray = 'const models = ' + JSON.stringify(modelsArray, null, 2) + ';';
        
        if (modelsRegex.test(demoContent)) {
          demoContent = demoContent.replace(modelsRegex, newModelsArray);
          
          // Update the demo stats
          const llmCount = models.filter(m => m.type === 'LLM').length;
          const visionCount = models.filter(m => m.type === 'Vision').length;
          const speechCount = models.filter(m => m.type === 'Speech').length;
          const providers = [...new Set(models.map(m => m.provider))];
          
          // Update the stats in the HTML
          demoContent = demoContent.replace(
            /<div><strong>Total Models:<\/strong> <span id="total_models">.*?<\/span><\/div>/,
            `<div><strong>Total Models:</strong> <span id="total_models">${models.length}</span></div>`
          );
          demoContent = demoContent.replace(
            /<div><strong>LLM Models:<\/strong> <span id="llm_count">.*?<\/span><\/div>/,
            `<div><strong>LLM Models:</strong> <span id="llm_count">${llmCount}</span></div>`
          );
          demoContent = demoContent.replace(
            /<div><strong>Vision Models:<\/strong> <span id="vision_count">.*?<\/span><\/div>/,
            `<div><strong>Vision Models:</strong> <span id="vision_count">${visionCount}</span></div>`
          );
          demoContent = demoContent.replace(
            /<div><strong>Speech Models:<\/strong> <span id="speech_count">.*?<\/span><\/div>/,
            `<div><strong>Speech Models:</strong> <span id="speech_count">${speechCount}</span></div>`
          );
          demoContent = demoContent.replace(
            /<div><strong>Providers:<\/strong> <span id="providers_count">.*?<\/span><\/div>/,
            `<div><strong>Providers:</strong> <span id="providers_count">${providers.length}</span></div>`
          );
          
          // Write the updated demo file
          fs.writeFileSync(demoPath, demoContent);
          
          console.log('Static demo updated with', selectedModels.length, 'models');
          console.log('Total models in database:', models.length);
        } else {
          console.log('Could not find models array in demo file');
        }
        "
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add public/static-demo.html
        git add data/db.json
        git commit -m "Auto-update static demo with latest models [skip ci]" || echo "No changes to commit"
        git push
